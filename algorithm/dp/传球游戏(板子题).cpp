#include <iostream>
#include <vector>
using namespace std;

int n, m;
int dp[100][100];

int main() {
    cin >> n >> m;
    dp[0][1] = 1; //重点，分解子问题
    for (int i = 1; i <= m; ++i) //一般都是循环n、m、m*n遍即可
        for (int j = 1; j <= n; ++j) {
            if (j == 1) {
                dp[i][j] = dp[i - 1][j + 1] + dp[i - 1][n];
            }
            else if (j == n) {
                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][1];
            }
            else dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j + 1];
        }
    cout << dp[m][1] << endl; // 然后dp表的一个元素即为答案
}
// 题目描述：
// 上体育课的时候，小萤的老师经常带着同学们一起做游戏。这次，老师带着同学们一起做传球游戏。
// 游戏规则是这样的：n个同学站成一个圆圈，其中的一个同学手里拿着一个球，当老师吹哨子时开始传球，每个同学可以把球传给自己左右的两个同学中的一个（左右任意），当老师再次吹哨子时，传球停止，此时，拿着球没传出去的那个同学就是败者，要给大家表演一个节目。
// 聪明的小萤提出一个有趣的问题：有多少种不同的传球方法可以使得从小萤手里开始传的球，传了m次以后，又回到小萤手里。两种传球的方法被视作不同的方法，当且仅当这两种方法中，接到球的同学按接球顺序组成的序列是不同的。比如有3个同学1号、2号、3号，并假设小萤为1号，球传了3次回到小萤手里的方式有1->2->3->1和1->3->2->1，共2种。

// 输入描述：
// 共一行，有两个用空格隔开的整数n，m（ 3 ≤ n ≤ 30，1 ≤ m ≤ 30 ）。

// 输出描述：
// 共一行，有一个整数，表示符合题意的方法数。

// 示例1
// 输入
// 3 3
// 输出
// 2 